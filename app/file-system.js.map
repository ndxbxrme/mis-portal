{
  "version": 3,
  "file": "file-system.js",
  "sourceRoot": "../src/",
  "sources": [
    "file-system.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\n\r\n{app, Notification} = require 'electron'\r\nfs = require 'fs-extra'\r\npath = require 'path'\r\nglob = require 'glob'\r\ndiff = require 'arr-diff'\r\nchokidar = require 'chokidar'\r\nsettings = require './settings'\r\nwebApp = require './web-app'\r\nMimer = require 'mimer'\r\nJSZip = require 'jszip'\r\nsuperagent = require 'superagent'\r\nAWS = require 'aws-sdk'\r\nAWS.config.bucket = settings.aws('bucket')#awsKey.bucket\r\nAWS.config.region = settings.aws('region')#'eu-west-1'\r\nAWS.config.accessKeyId = settings.aws('id')#awsKey.id\r\nAWS.config.secretAccessKey = settings.aws('key')#awsKey.key\r\nS3 = new AWS.S3()\r\n\r\nMAX_FILE_SIZE = 200000\r\nPATTERN = 'image/*,.xls,.xlsx,.xlsm,.doc,.docx,.pdf,.txt,.csv,.zip,.rar'\r\nuploadPath = null\r\nuploadReplacePath = null\r\nuploadGlobPath = null\r\ndownloadPath = path.join app.getPath('downloads'), 'MIS Portal Downloads'\r\ndownloadReplacePath = (downloadPath + path.sep).replace(/\\\\/g, '/') \r\ndownloadGlobPath = path.join downloadPath, '**/*'\r\nsanitizedClientName = ''\r\nwatching = false\r\nuploading = false\r\ndownloading = false\r\nvalidFiles = []\r\ninvalidFiles = []\r\npad = (n) ->\r\n  if n < 10 then '0' + n else n.toString()\r\nsanitizeName = (name) ->\r\n  name.replace(/\\//g, '_')\r\ndebounce = (func, delay) ->\r\n  inDebounce = null\r\n  ->\r\n    context = @\r\n    args = arguments\r\n    clearTimeout inDebounce\r\n    inDebounce = setTimeout ->\r\n      func.apply context, args\r\n    , delay\r\nwatch = (dir, cb) ->\r\n  if not watching\r\n    chokidar.watch dir\r\n    .on 'change', (path) ->\r\n      cb 'change', path if watching\r\n    .on 'add', (path) ->\r\n      cb 'add', path if watching\r\n    .on 'unlink', (path) ->\r\n      cb 'unlink', path if watching\r\n    .on 'ready', ->\r\n      watching = true\r\nglobStringToRegex = (str) ->\r\n  regexp = ''\r\n  excludes = []\r\n  if str.length > 2 and str[0] == '/' and str[str.length - 1] == '/'\r\n    regexp = str.substring(1, str.length - 1)\r\n  else\r\n    split = str.split(',')\r\n    if split.length > 1\r\n      i = 0\r\n      while i < split.length\r\n        r = globStringToRegex(split[i])\r\n        if r.regexp\r\n          regexp += '(' + r.regexp + ')'\r\n          if i < split.length - 1\r\n            regexp += '|'\r\n        else\r\n          excludes = excludes.concat(r.excludes)\r\n        i++\r\n    else\r\n      if str.indexOf('!') == 0\r\n        excludes.push '^((?!' + globStringToRegex(str.substring(1)).regexp + ').)*$'\r\n      else\r\n        if str.indexOf('.') == 0\r\n          str = '*' + str\r\n        regexp = '^' + str.replace(new RegExp('[.\\\\\\\\+*?\\\\[\\\\^\\\\]$(){}=!<>|:\\\\-]', 'g'), '\\\\$&') + '$'\r\n        regexp = regexp.replace(/\\\\\\*/g, '.*').replace(/\\\\\\?/g, '.')\r\n  regexp: regexp\r\n  excludes: excludes\r\nvalidatePattern = (file, val) ->\r\n  if !val\r\n    return true\r\n  pattern = globStringToRegex(val)\r\n  valid = true\r\n  if pattern.regexp and pattern.regexp.length\r\n    regexp = new RegExp(pattern.regexp, 'i')\r\n    valid = file.mimeType and regexp.test(file.mimeType) or file.name and regexp.test(file.name)\r\n  len = pattern.excludes.length\r\n  while len--\r\n    exclude = new RegExp(pattern.excludes[len], 'i')\r\n    valid = valid and (!file.mimeType or exclude.test(file.mimeType)) and (!file.name or exclude.test(file.name))\r\n  valid\r\ncheckFile = (file) ->\r\n  file.mimeType = Mimer file.name\r\n  file.path = file.path or file.name\r\n  if file.size > MAX_FILE_SIZE\r\n    file.error = 'MAX_SIZE'\r\n    return false\r\n  if not validatePattern file, PATTERN\r\n    file.error = 'PATTERN'\r\n    return false\r\n  return true\r\ncheckAndAddFile = (file) ->\r\n  new Promise (resolve, reject) ->\r\n    if file.type is 'directory'\r\n      return resolve()\r\n    if /\\.zip$/.test file.name\r\n      data = await fs.readFile file.path\r\n      zip = await JSZip.loadAsync data\r\n      zfiles = []\r\n      zip.forEach (key, zfile) ->\r\n        return if zfile.dir\r\n        zfiles.push \r\n          key: key\r\n          file: zfile\r\n      for zfile in zfiles\r\n        u8 = await zfile.file.async 'nodebuffer'\r\n        myfile =\r\n          name: sanitizedClientName + '/' + file.name.replace('.zip', '') + '/' + zfile.key\r\n          path: zfile.key\r\n          type: zfile.file\r\n          parent: file.name\r\n          data: u8\r\n          size: u8.length\r\n        await checkAndAddFile myfile\r\n      resolve()\r\n    else\r\n      if checkFile file\r\n        validFiles.unshift file\r\n        await sendToS3 file\r\n      else\r\n        invalidFiles.unshift file\r\n      resolve()\r\nsendToS3 = (file) ->\r\n  new Promise (resolve, reject) ->\r\n    if file.data\r\n      m =\r\n        Bucket: AWS.config.bucket\r\n        Key: file.name.replace(/\\\\/g, '/')\r\n        Body: file.data\r\n      S3.putObject m, (e, r) ->\r\n        resolve()\r\n    else\r\n      data = await fs.readFile file.path\r\n      m =\r\n        Bucket: AWS.config.bucket\r\n        Key: file.name\r\n        Body: data\r\n      S3.putObject m, (e, r) ->\r\n        resolve()\r\ngetKey = (user) ->    \r\n  b = (((Math.random() * 9999999) + 50000 | 0).toString(36) + ((Math.random() * 9999999) + 50000 | 0).toString(36))\r\n  b.substr(0,4) + user._id.substr(0,2) + b.substr(4)\r\nreportToPortal = ->\r\n  new Promise (resolve, reject) ->\r\n    if validFiles.length + invalidFiles.length is 0\r\n      return resolve()\r\n    validFilesData = validFiles.map (file) ->\r\n      name: file.name\r\n      path: file.path\r\n      size: file.size\r\n      mimeType: file.mimeType\r\n      date: new Date()\r\n    invalidFilesData = invalidFiles.map (file) ->\r\n      name: file.name\r\n      path: file.path\r\n      size: file.size\r\n      mimeType: file.mimeType\r\n      error: file.error\r\n      date: new Date()\r\n    user = settings.get 'user'\r\n    data = JSON.stringify\r\n      user: user\r\n      valid: validFilesData\r\n      invalid: invalidFilesData\r\n    superagent.post settings.portalUrl() + '/report-uploads/' + getKey user\r\n    .send\r\n      data: (new Buffer(data, 'binary')).toString('base64')\r\n    .end (err, response) ->\r\n      resolve()\r\nlistDownloads = (date) ->\r\n  new Promise (resolve, reject) ->\r\n    user = settings.get 'user'\r\n    data = JSON.stringify\r\n      user: user\r\n      shortcodes: Object.keys user.profile.payrollClients\r\n      date: date\r\n    console.log settings.portalUrl() + '/list-downloads/' + getKey user\r\n    superagent.post settings.portalUrl() + '/list-downloads/' + getKey user\r\n    .send \r\n      data: (new Buffer(data, 'binary')).toString('base64')\r\n    .end (err, response) ->\r\n      #console.log err, response\r\n      resolve response.body\r\n    \r\ndoUpload = (fileName) ->\r\n  new Promise (resolve, reject) ->\r\n    stats = await fs.stat fileName\r\n    file =\r\n      name: fileName.replace uploadReplacePath, ''\r\n      path: fileName\r\n      type: if stats.isDirectory() then 'directory' else 'file'\r\n      size: stats.size\r\n    await checkAndAddFile file\r\n    resolve()\r\ncheckForChanges = ->\r\n  if uploading\r\n    return setTimeout checkForChanges\r\n    , 100\r\n  validFiles = []\r\n  invalidFiles = []\r\n  user = settings.get 'user'\r\n  if files = settings.get user._id + '.files'\r\n    glob uploadGlobPath, (err, globFiles) ->\r\n      deleted = diff files, globFiles\r\n      added = diff globFiles, files\r\n      uploading = true\r\n      for file in added\r\n        await doUpload file\r\n      await reportToPortal files\r\n      uploading = false\r\n      settings.set user._id + '.files', globFiles\r\n      settings.save()\r\n  else\r\n    glob uploadGlobPath, (err, files) ->\r\n      settings.set user._id + '.files', files\r\n      settings.save()\r\ndownloadFile = (key) ->\r\n  new Promise (resolve, reject) ->\r\n    filePath = path.join downloadPath, key\r\n    if not await fs.exists filePath\r\n      dirPath = path.dirname filePath\r\n      await fs.ensureDir dirPath if not await fs.exists dirPath\r\n      m =\r\n        Bucket: AWS.config.bucket\r\n        Key: key\r\n      rs = S3.getObject(m).createReadStream()\r\n      ws = fs.createWriteStream filePath\r\n      rs.on 'error', (e) ->\r\n        console.log 'read error', e\r\n      rs.on 'close', ->\r\n        console.log 'read stream closed'\r\n      ws.on 'close', ->\r\n        console.log 'write stream closed'\r\n        resolve()\r\n      ws.on 'end', ->\r\n        resolve()\r\n      ws.on 'error', ->\r\n        resolve()\r\n      rs.pipe ws\r\n    else\r\n      resolve()\r\ncheckForDownloads = ->\r\n  console.log 'check', settings.get 'lastDownload'\r\n  downloads = await listDownloads settings.get 'lastDownload'\r\n  console.log 'downloads length', downloads.length\r\n  maxDate = new Date(0)\r\n  for download in downloads\r\n    #console.log 'downloading', download.document\r\n    if new Date(download.createdat) > new Date(maxDate)\r\n      maxDate = download.createdat\r\n    console.log download.document\r\n    await downloadFile download.document\r\n    #console.log 'completed download'\r\n  if downloads.length > 0\r\n    settings.set 'lastDownload', maxDate\r\n    notification = new Notification\r\n      title: 'MIS Portal'\r\n      body: 'New files have been downloaded'\r\n    notification.show()\r\n  settings.save()\r\n  webApp.listLocalFiles()\r\nmodule.exports =\r\n  listLocalFiles: ->\r\n    new Promise (resolve, reject) ->\r\n      if user = settings.get 'user'\r\n        glob uploadGlobPath, (err, files) ->\r\n          resolve files.map (file) ->\r\n            file.replace uploadReplacePath, ''\r\n      else\r\n        resolve []\r\n  getLocalFolder: ->\r\n    uploadPath\r\n  checkForDownloads: ->\r\n    if settings.get 'autoDownload'\r\n      checkForDownloads()\r\n  init: ->\r\n    new Promise (resolve, reject) ->\r\n      if user = settings.get 'user'\r\n        ###\r\n        m =\r\n          Bucket: AWS.config.bucket\r\n          Prefix: 'N_A/2018/01'\r\n        S3.listObjects m, (e, r) ->\r\n        ###\r\n        if user.profile.type \r\n          if (user.profile.type.code is '00' or user.profile.type.code is '01') and Object.keys(user.profile.payrollClients).length > 0\r\n            uploadPath = path.join app.getPath('downloads'), 'MIS Portal Downloads'\r\n            uploadReplacePath = (uploadPath + path.sep).replace(/\\\\/g, '/') \r\n            uploadGlobPath = path.join uploadPath, '**/*'\r\n            #admin user\r\n            if settings.get 'autoDownload'\r\n              await fs.mkdir downloadPath if not await fs.exists downloadPath\r\n              if user.profile.payrollClients\r\n                for shortcode, client of user.profile.payrollClients\r\n                  clientPath = path.join downloadPath, sanitizeName(client.name)\r\n                  await fs.mkdir clientPath if not await fs.exists clientPath\r\n                checkForDownloads()\r\n              #get files to download\r\n          if user.profile.type.code is '03'\r\n            uploadPath = path.join app.getPath('documents'), 'MIS Portal Upload'\r\n            sanitizedClientName = sanitizeName user.profile.clientID.clientname\r\n            clientPath = path.join uploadPath, sanitizedClientName\r\n            uploadReplacePath = (clientPath + path.sep).replace(/\\\\/g, '/') \r\n            uploadGlobPath = path.join clientPath, '**/*'\r\n            if settings.get 'autoUpload'\r\n              await fs.mkdir uploadPath if not await fs.exists uploadPath\r\n              await fs.mkdir clientPath if not await fs.exists clientPath\r\n              yearPath = path.join clientPath, new Date().getFullYear().toString()\r\n              await fs.mkdir yearPath if not await fs.exists yearPath\r\n              i = 0\r\n              while i++ < 53\r\n                weekPath = path.join yearPath, pad i\r\n                await fs.mkdir weekPath if not await fs.exists weekPath\r\n              sundryPath = path.join yearPath, 'sundry'\r\n              await fs.mkdir sundryPath if not await fs.exists sundryPath\r\n              debounced = debounce checkForChanges, 1000\r\n              watch uploadPath.replace(/\\\\/g, '/'), debounced\r\n              checkForChanges()\r\n      resolve()"
  ]
}